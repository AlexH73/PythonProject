#Правильная скобочная последовательность
"""
Одна из стандартных задач на программирование. Подумайте над способом ее решения, если не приходит ничего в голову, загляните в подсказку)
Итак, у нас есть последовательность скобочных символов, состоящая только из символов ( и )
Ваша задача определить является ли введенная скобочная последовательность правильной.
Правильная скобочная последовательность (ПСП) называется строка, состоящая только символов "скобок", где каждой закрывающей скобке найдётся соответствующая открывающая. При этом учитывайте, что:

    Пустая последовательность является правильной.
    Если A – правильная скобочная последовательность, то (A) – правильные скобочные последовательности.
    Если A и B – правильные скобочные последовательности, то AB – правильная скобочная последовательность.

Если введенная строка является ПСП, выведите YES, в противном случае - NO.
"""
def is_valid_parentheses(s):
    """
    Проверяет, является ли строка правильной скобочной последовательностью.

    Args:
      s: Строка, состоящая из скобочных символов '(' и ')'.

    Returns:
      "YES", если строка является ПСП, "NO" в противном случае.
    """
    stack = []  # Используем стек для хранения открывающих скобок
    for char in s: # Перебираем все символы
      if char == '(':
        stack.append(char) # Если символ открывающая скобка добавляем ее в стек
      elif char == ')': # Если символ закрывающая скобка
        if not stack:  # Если стек пуст, то закрывающая скобка без открывающей -> не ПСП
          return "NO"
        stack.pop() # Убираем из стека последнюю открывающую скобку
    return "YES" if not stack else "NO"  # Возвращаем YES, если стек пуст, иначе NO

# Получаем ввод от пользователя
input_str = input("Введите скобочную последовательность: ")

# Вызываем функцию и выводим результат
result = is_valid_parentheses(input_str)
print(result)

"""
Ввод 	Вывод
() 	    YES
(()) 	YES
(()()) 	YES
)( 	    NO
(() 	NO
()) 	NO
“ 	    YES
"""

#Правильная скобочная последовательность 2
"""
Наша программа принимает на вход последовательность скобочных символов. 
Ваша задача определить является ли введенная скобочная последовательность правильной.
Правильная скобочная последовательность (ПСП) называется строка, состоящая только из символов "скобки", 
где каждой закрывающей скобке найдётся соответствующая открывающая (причём того же типа). При этом учитывайте, что:

    Пустая последовательность является правильной.
    Если A – правильная скобочная последовательность, то (A), [A] и {A} – правильные скобочные последовательности.
    Если A и B – правильные скобочные последовательности, то AB – правильная скобочная последовательность.

Если введенная строка является ПСП, выведите YES, в противном случае - NO.
"""

def is_valid_parentheses(s):
    """
    Проверяет, является ли строка правильной скобочной последовательностью (с разными типами скобок).

    Args:
        s: Строка, состоящая из скобочных символов '(', ')', '[', ']', '{', '}'.

    Returns:
        "YES", если строка является ПСП, "NO" в противном случае.
    """
    stack = []  # Используем стек для хранения открывающих скобок
    mapping = {')': '(', ']': '[', '}': '{'} # Словарь соответствий между открывающими и закрывающими скобками

    for char in s: # Перебираем все символы
        if char in ['(', '[', '{']: # Если символ открывающая скобка
            stack.append(char) # добавляем ее в стек
        elif char in [')', ']', '}']: # Если символ закрывающая скобка
            if not stack: # Если стек пуст, то не ПСП
                return "NO"
            top = stack.pop() # Берем последнюю скобку из стека
            if mapping[char] != top: # Если скобка не соответствует закрывающей скобке, то не ПСП
                return "NO"
    return "YES" if not stack else "NO" # Возвращаем YES, если стек пуст, иначе NO

# Получаем ввод от пользователя:
input_str = input("Введите скобочную последовательность: ")

# Вызываем функцию и выводим результат
result = is_valid_parentheses(input_str)
print(result)

"""
Ввод 	Вывод
() 	    YES
[] 	    YES
{} 	    YES
()[]{} 	YES
([{}]) 	YES
(] 	    NO
[(]) 	NO
([)] 	NO
(( 	    NO
)) 	    NO
[} 	    NO
“ 	    YES
"""