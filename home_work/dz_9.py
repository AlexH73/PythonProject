# 1. Диапазон температуры:
"""
Напишите метод is_in_temperature_range, который принимает температуру и два предела (min и max) в качестве аргументов.
Метод должен возвращать True, если температура находится в диапазоне [min, max].
Иначе метод должен возвращать False.
"""
# Назначаем метод и аргументы
def is_in_temperature_range(temp, min_temp, max_temp):
    # Проверка условий и возврат
    return min_temp <= temp <= max_temp

# Запуск и вывод результата
print(is_in_temperature_range(30, 17, 35))

# 2. Алфавитное сравнение:
"""
Напишите метод compare_alphabetical_order, который принимает два слова.
Метод должен возвращать "Первое", если первое слово идёт раньше в алфавите,
"Второе", если второе идёт раньше, или "Равно", если слова одинаковые.
"""
# Назначаем метод и аргументы
def compare_alphabetical_order(word1, word2):
    # Проверка условий и возврат
    if word1 < word2:
        return "Первое"
    elif word1 > word2:
        return "Второе"
    else:
        return "Равно"

# Запуск и вывод результата
print(compare_alphabetical_order("Первое", "Второе"))

# 3. Проверка чётности и положительности:
"""
Напишите метод is_even_and_positive, который принимает число.
Метод должен возвращать True, если число чётное и положительное.
Иначе метод должен возвращать False.
"""
# Назначаем метод и аргумент
def is_even_and_positive(num):
    # Проверка условий и возврат
    if num % 2 == 0 and num > 0:
        return True
    else:
        return False

# Запуск и вывод результата
print(is_even_and_positive(10))

# 4. Проверка возрастной группы:
"""
Напишите метод get_age_group, который принимает возраст.
Метод должен возвращать:

    "Младенец", если возраст меньше 3.
    "Ребёнок", если возраст от 3 до 12.
    "Подросток", если возраст от 13 до 19.
    "Взрослый", если возраст 20 и старше.
"""
# Назначаем метод и аргумент
def get_age_group(age):
    # Проверка условий и возврат
    if 0 < age < 3:
        return "Младенец"
    elif 3 <= age <= 12:
        return "Ребёнок"
    elif 13 <= age <= 19:
        return "Подросток"
    elif age > 19:
        return "Взрослый"
    else:
        return "Не верное значение"

# Запуск и вывод результата
print(get_age_group(17))

# 5. Проверка надёжности пароля:
"""
Напишите метод is_strong_password, который принимает строку пароля.
Метод должен возвращать True, если пароль содержит не менее 8 символов и включает как буквы, так и цифры.
Иначе метод должен возвращать False.
"""
# Назначаем метод и аргумент
def is_strong_password(password):
    # Проверка длины пароля
    if len(password) < 8:
        return False

    # Вспомогательная функция для проверки наличия букв
    def has_letter(password):
        if not password:
            return False
        return password[0].isalpha() or has_letter(password[1:])

    # Вспомогательная функция для проверки наличия цифр
    def has_digit(password):
        if not password:
            return False
        return password[0].isdigit() or has_digit(password[1:])

    return has_letter(password) and has_digit(password)

# Ввод строки и вызов функции
password = input("Введите пароль: ")
print(is_strong_password(password))

# 6. Определение сезона:
"""
Напишите метод get_season, который принимает номер месяца (1 для января, 12 для декабря).
Метод должен возвращать сезон ("Зима", "Весна", "Лето", "Осень") в зависимости от месяца.
"""
# Назначаем функцию
def get_season(month):
    # Определяем сезон на основе номера месяца
    if month == 12 or month == 1 or month == 2 : # 1. вариант определения
        return "Зима"
    elif 3 <= month <= 5: # 2. вариант определения
        return "Весна"
    elif month in [6, 7, 8]: # 3. вариант определения
        return "Лето"
    elif month in {9, 10, 11}: # 4. вариант определения
        return "Осень"
    else:
        return "Некорректный номер месяца"

# Вызов и вывод
print(get_season(1))  # Зима
print(get_season(4))  # Весна
print(get_season(7))  # Лето
print(get_season(10)) # Осень
print(get_season(22)) # Error

# 7. Проверка длины строки:
"""
Напишите метод is_valid_length, который принимает строку и максимальную длину.
Метод должен возвращать True, если длина строки меньше или равна максимальной длине.
Иначе метод должен возвращать False.
"""
# Назначаем функцию
def is_valid_length(string, max_length):
    # Проверяем, меньше ли или равна длина строки максимальной длине
    return len(string) <= max_length

# Вызов и вывод
print(is_valid_length("Привет", 10))  # True
print(is_valid_length("Привет, мир!", 10))  # False

# 8. Тип треугольника:
"""
Напишите метод get_triangle_type, который принимает три стороны треугольника.
Метод должен возвращать:

    "Равносторонний", если все стороны равны.
    "Равнобедренный", если две стороны равны.
    "Разносторонний", если все стороны разные.
"""
# Назначаем функцию
def get_triangle_type(side1, side2, side3):
    # Проверяем, является ли треугольник равносторонним
    if side1 == side2 == side3:
        return "Равносторонний"
    # Проверяем, является ли треугольник равнобедренным
    elif side1 == side2 or side2 == side3 or side1 == side3:
        return "Равнобедренный"
    # Если ни одно из условий не выполнено, треугольник разносторонний
    else:
        return "Разносторонний"

# Вызов и вывод
print(get_triangle_type(3, 3, 3))  # Равносторонний
print(get_triangle_type(3, 3, 4))  # Равнобедренный
print(get_triangle_type(3, 4, 5))  # Разносторонний